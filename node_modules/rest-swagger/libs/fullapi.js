const MyPath = require('./path');
class FullApi {
    constructor(resource, api, properties) {
        this.resource = resource;
        this.api = api;
        this.properties = properties;
        this.data = [];
    }
    combineObject(objA, objB) {
        if (objA == null || objA == {}) return objB;
        if (objB == null || objB == {}) return objA;

        const keys = Object.keys(objB);
        let newObj = objA;
        newObj[keys[0]] = objB[keys[0]];
        return newObj;
    }
    getData() {
        this.genApiDoc();
        return this.data;
    }
    genApiDoc() {

        let base = this.combineObject(this.genGetAllPath(), this.genAddPath());
        base = this.combineObject(base, this.genUpdatePath());
        this.data.push({ 'key': `/${this.resource}`, 'value': base })

        let edit = this.combineObject(this.genGetIdPath(), this.genDeletePath());
        this.data.push({ 'key': `/${this.resource}/{id}`, 'value': edit })

    }
    genGetAllPath() {
        if (this.api == 'all' || this.api.indexOf('list') >= 0) {
            const path = new MyPath('get')
                .addTag(this.resource)
                .addSummary('Lây dứ liệu ' + this.resource)
                .addOperation('get' + this.resource)
                .addConsume('application/json')
                .addProduce('application/json')
                .addResponse('200', { 'description': 'ok' });
            return path.getJson();
        } else {
            return null
        }

    }
    genGetIdPath() {
        if (this.api == 'all' || this.api.indexOf('show') >= 0) {
            const id = {
                name: 'id',
                in: 'path',
                description: `Id của ${this.resource}`,
                required: true,
                type: 'integer'
            }
            const path = new MyPath('get')
                .addTag(this.resource)
                .addSummary('Lấy dữ liệu ' + this.resource + ' theo id.')
                .addOperation('get' + this.resource + 'byId')
                .addConsume('application/json')
                .addProduce('application/json')
                .addParams(id)
                .addResponse('200', { 'description': 'ok' });
            return path.getJson();
        } else {
            return null
        }
    }
    genAddPath() {
        const props = this.properties.map(item => {
            return {
                name: item.name,
                in: 'formData',
                type: item.type,
                description: item.description || 'đang cập nhật...',
                require: item.require || false
            }
        })

        if (this.api == 'all' || this.api.indexOf('create') >= 0) {
            
            const path = new MyPath('post')
                .addTag(this.resource)
                .addSummary('Thêm dữ liệu ' + this.resource + ' mới vào CSDL.')
                .addOperation('add' + this.resource)
                .addConsume('application/x-www-form-urlencoded')
                .addProduce('application/json')
                .addResponse('200', { 'description': 'ok' });

            props.forEach(element => {
                path.addParams(element)
            });
            return path.getJson();
        } else {
            return null;
        }
    }
    genUpdatePath() {
        const props = this.properties.map(item => {
            return {
                name: item.name,
                in: 'formData',
                type: item.type,
                description: item.description || 'đang cập nhật...',
                require: item.require || false
            }
        })
        if (this.api == 'all' || this.api.indexOf('edit') >= 0) {
            
            const path = new MyPath('put')
                .addTag(this.resource)
                .addSummary('Cập nhật dữ liệu ' + this.resource + ' mới vào CSDL.')
                .addOperation('edit' + this.resource)
                .addConsume('application/x-www-form-urlencoded')
                .addProduce('application/json')

                .addResponse('200', { 'description': 'ok' });

            props.forEach(element => {
                path.addParams(element)
            });
            return path.getJson();
        } else {
            return null;
        }
    }
    genDeletePath() {
        if (this.api == 'all' || this.api.indexOf('delete') >= 0) {
            const id = {
                name: 'id',
                in: 'path',
                description: `Id của ${this.resource}`,
                required: true,
                format: 'int64',
                type: 'integer'
            }
            const path = new MyPath('delete')
                .addTag(this.resource)
                .addSummary('Xóa ' + this.resource + ' khỏi CSDL theo Id.')
                .addOperation('delete' + this.resource)
                .addConsume('application/json')
                .addProduce('application/json')
                .addParams(id)
                .addResponse('200', { 'description': 'ok' });
            return path.getJson();
        } else {
            return null;
        }
    }
}
module.exports = FullApi;