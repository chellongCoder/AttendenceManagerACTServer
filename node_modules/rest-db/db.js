const singleton = Symbol();
const singletonEnforcer = Symbol();
const knex = require('knex');
const Config = require('rest-config');
const config = Config.instance;
const GLOBAL_FILE = '/global.yml';
const METADATA_FILE = '/meta.yml';
const knexHooks = require('knex-hooks');

class DatabaseConnector {
    constructor(enforcer) {
        if (enforcer !== singletonEnforcer) {
            throw new Error('Cannot construct singleton');
        }
        config.load([Config.rootPath + GLOBAL_FILE, Config.rootPath + METADATA_FILE]);
        this.db = null;
        this.connect();
    }
    static get instance() {
        if (!this[singleton]) {
            this[singleton] = new DatabaseConnector(singletonEnforcer);
        }

        return this[singleton];
    }
    connect() {
        const dbconfig = config.global('database');
        try {
            this.db = knex({
                client: dbconfig.driver,
                version: '5.7',
                connection: {
                    host : dbconfig.host,
                    port: dbconfig.port,
                    user: dbconfig.user,
                    password: dbconfig.password,
                    database: dbconfig.name
                }
            })
            knexHooks(this.db);
        }
        catch(e) {
            throw new Error('Cannot connect Database with config ', dbconfig);
        }
    }

    getConnect() {
        return this.db;
    }

}
module.exports = DatabaseConnector;